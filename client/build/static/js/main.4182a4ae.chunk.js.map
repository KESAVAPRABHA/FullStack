{"version":3,"sources":["pages/BookCard.jsx","pages/Save.jsx","components/Loading/Loading.jsx","components/Error/Error.jsx","components/Results/Results.jsx","utils/GlobalContext.js","pages/Search.jsx","components/Navbar/Navbar.js","components/Footer/Footer.jsx","components/NoMatch/NoMatch.jsx","components/Login.jsx","components/Signup.jsx","App.jsx","index.js"],"names":["BookCard","book","onDelete","Card","style","width","backgroundColor","className","image","Img","variant","src","height","Body","title","Title","color","authors","Text","join","description","substr","infoLink","href","target","rel","Button","onClick","Save","useState","savedBooks","setSavedBooks","useEffect","a","fetch","response","ok","Error","json","data","console","error","toast","position","POSITION","TOP_CENTER","getSavedBooks","handleDeleteBook","id","headers","method","log","_id","success","filter","b","sendEmail","body","JSON","stringify","userEmail","books","Container","fluid","Row","length","map","Col","Loading","Spinner","animation","socket","to","GlobalContext","createContext","initState","reducer","state","action","type","payload","GlobalProvider","props","useReducer","dispatch","Provider","value","useGlobalContext","useContext","Results","recommendedBooks","setRecommendedBooks","io","on","err","disconnect","warn","statusText","fetchRecommendations","handleSaveBook","volumeInfo","imageLinks","thumbnail","errorJson","message","emit","warning","index","fontSize","size","Search","loading","setLoading","setError","queryRef","useRef","handleFetchBook","e","preventDefault","query","current","trim","process","result","items","info","focus","Jumbotron","onSubmit","htmlFor","required","name","ref","placeholder","Navbar","isSearch","setIsSearch","location","useLocation","pathname","alt","Footer","bg","fixed","fill","NoMatch","Login","setIsLogin","email","password","formData","setFormData","setSuccess","history","useHistory","handleChange","handleSubmit","setTimeout","push","Alert","Form","Group","controlId","Label","Control","onChange","Signup","disabled","App","isLogin","exact","path","component","transition","Zoom","autoClose","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAyBeA,MArBf,YAAuC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SACtB,OACI,eAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,QAASC,gBAAiB,WAAaC,UAAU,MAAvE,UACKN,EAAKO,OAAS,cAACL,EAAA,EAAKM,IAAN,CAAUC,QAAQ,MAAMC,IAAKV,EAAKO,MAAOJ,MAAO,CAAEQ,OAAQ,OACzE,eAACT,EAAA,EAAKU,KAAN,WACKZ,EAAKa,OAAS,cAACX,EAAA,EAAKY,MAAN,CAAYX,MAAO,CAAEY,MAAO,QAA5B,SAAuCf,EAAKa,QAC1Db,EAAKgB,SACF,cAACd,EAAA,EAAKe,KAAN,CAAWX,UAAU,yBAArB,uBAAsDN,EAAKgB,QAAQE,KAAK,SAE3ElB,EAAKmB,aAAe,eAACjB,EAAA,EAAKe,KAAN,WAAYjB,EAAKmB,YAAYC,OAAO,EAAG,KAAvC,SACpBpB,EAAKqB,UACF,cAACnB,EAAA,EAAKe,KAAN,UACI,mBAAGK,KAAMtB,EAAKqB,SAAUE,OAAO,SAASC,IAAI,aAA5C,4BAGR,cAACC,EAAA,EAAD,CAAQhB,QAAQ,UAAUiB,QAAS,kBAAMzB,EAASD,IAAlD,2BCyLD2B,MA/Ff,WAAiB,IAAD,EACwBC,mBAAS,IADjC,mBACLC,EADK,KACOC,EADP,KAGZC,qBAAU,WAAM,4CACZ,8BAAAC,EAAA,+EAE+BC,MAAM,mCAFrC,WAEcC,EAFd,QAGsBC,GAHtB,sBAIkB,IAAIC,MAAM,+BAJ5B,uBAM2BF,EAASG,OANpC,OAMcA,EANd,OAOQP,EAAcO,EAAKC,MAP3B,kDASQC,QAAQC,MAAR,MACAC,IAAMD,MAAM,4BAA6B,CACrCE,SAAUD,IAAME,SAASC,aAXrC,2DADY,uBAAC,WAAD,wBAgBZC,KACD,IAEH,IAAMC,EAAgB,uCAAG,WAAO9C,GAAP,iBAAAgC,EAAA,+EAEMC,MAAM,mCAAD,OAAoCjC,EAAK+C,IAAM,CACvEC,QAAS,CAAE,eAAgB,oBAC3BC,OAAQ,WAJK,cAEXf,EAFW,gBAOEA,EAASG,OAPX,OAOXA,EAPW,OAQjBE,QAAQW,IAAIb,GACZE,QAAQW,IAAI,0BAA2BlD,EAAKmD,KAExCd,EAAKe,SACLtB,EAAcD,EAAWwB,QAAO,SAAAC,GAAC,OAAIA,EAAEH,MAAQnD,EAAKmD,QACpDV,IAAMW,QAAQ,0CAA2C,CACrDV,SAAUD,IAAME,SAASC,cAG7BH,IAAMD,MAAM,sBAAuB,CAC/BE,SAAUD,IAAME,SAASC,aAlBhB,kDAsBjBL,QAAQW,IAAR,MACAT,IAAMD,MAAM,sBAAuB,CAC/BE,SAAUD,IAAME,SAASC,aAxBZ,0DAAH,sDA6BhBW,EAAS,uCAAG,sBAAAvB,EAAA,sEAEQ,gCAFR,SAGaC,MAAM,uCAAwC,CACjEgB,OAAQ,OACRD,QAAS,CAAE,eAAgB,oBAC3BQ,KAAMC,KAAKC,UAAU,CAAEC,UAJT,gCAIoBC,MAAO/B,MANnC,iBASIM,GATJ,sBASc,IAAIC,MAAM,wBATxB,OAWVK,IAAMW,QAAQ,2BAA4B,CAAEV,SAAUD,IAAME,SAASC,aAX3D,kDAaVL,QAAQC,MAAM,uBAAd,MACAC,IAAMD,MAAM,sBAAuB,CAAEE,SAAUD,IAAME,SAASC,aAdpD,0DAAH,qDAkBf,OACI,eAACiB,EAAA,EAAD,CAAWC,OAAK,EAACxD,UAAU,gBAA3B,UACI,eAACyD,EAAA,EAAD,CAAKzD,UAAU,UAAf,UACI,oBAAIA,UAAU,6BAA6BH,MAAO,CAAEY,MAAO,QAA3D,yBAGA,wBAAQW,QAAS6B,EAAWjD,UAAU,uBAAtC,0CAGJ,cAACyD,EAAA,EAAD,CAAKzD,UAAU,OAAf,SACKuB,EAAWmC,OAAS,EACjBnC,EAAWoC,KAAI,SAACjE,GAAD,OACX,cAACkE,EAAA,EAAD,CAAmB5D,UAAU,OAA7B,SACI,cAAC,EAAD,CAAUN,KAAMA,EAAMC,SAAU6C,KAD1B9C,EAAK+C,OAKnB,cAACmB,EAAA,EAAD,UACI,+D,SCrLTC,EAZC,WACf,OACO,sBAAK7D,UAAU,UAAf,UACI,4CACA,cAAC8D,EAAA,EAAD,CAASC,UAAU,SAAS5D,QAAQ,UAAUH,UAAU,SACxD,cAAC8D,EAAA,EAAD,CAASC,UAAU,SAAS5D,QAAQ,YACpC,cAAC2D,EAAA,EAAD,CAASC,UAAU,SAAS5D,QAAQ,SAASH,UAAU,SACvD,cAAC8D,EAAA,EAAD,CAASC,UAAU,SAAS5D,QAAQ,gBCGjC2B,ICkHXkC,EDlHWlC,EAVf,WACI,OACI,sBAAK9B,UAAU,sBAAf,UACI,kDADJ,IAEI,+BAAI,cAAC,IAAD,CAAMiE,GAAG,IAAT,wBAAJ,0B,QEJCC,EAAgBC,0BAGvBC,EAAY,CACjBd,MAAO,IAGFe,EAAU,SAACC,EAAOC,GAEvB,OAAQA,EAAOC,MACR,IAAK,eACD,OAAO,2BACAF,GADP,IAEIhB,MAAOiB,EAAOE,UAE5B,QACC,OAAOH,IAWKI,EAPQ,SAAAC,GAAU,IAAD,EACAC,qBAAWP,EAASD,GADpB,mBACpBE,EADoB,KACbO,EADa,KAE/B,OAAO,cAACX,EAAcY,SAAf,aAAwBC,MAAO,CAAET,EAAOO,IAAgBF,KAOnDK,EAAmB,WAE/B,OAAOC,qBAAWf,I,iBDqQJgB,MAtKf,WAAoB,IAAD,EACKF,IAAX1B,EADM,oBACNA,MADM,EAEiChC,mBAAS,IAF1C,mBAER6D,EAFQ,KAEUC,EAFV,KAKf3D,qBAAU,WAiBN,OAhBAuC,EAASqB,IAAG,0BAELC,GAAG,WAAW,WACjBrD,QAAQW,IAAI,qCAGhBoB,EAAOsB,GAAG,oBAAoB,SAAA/E,GAC1B4B,IAAMW,QAAN,8BAAqCvC,GAAS,CAC1C6B,SAAUD,IAAME,SAASC,gBAIjC0B,EAAOsB,GAAG,iBAAiB,SAAAC,GACvBtD,QAAQC,MAAM,2BAA4BqD,MAGvC,WACHvB,EAAOwB,gBAEZ,IAGH/D,qBAAU,YACoB,uCAAG,8BAAAC,EAAA,+EAGEC,MAAM,6CAHR,YAGfC,EAHe,QAIRC,GAJQ,iCAKED,EAASG,OALX,OAKXC,EALW,OAMjBoD,EAAoBpD,GANH,wBAQjBC,QAAQwD,KAAK,mCAAoC7D,EAAS8D,YARzC,0DAWrBzD,QAAQC,MAAM,kCAAd,MAXqB,0DAAH,qDAe1ByD,KACD,IAGH,IAAMC,EAAc,uCAAG,WAAOlG,GAAP,qBAAAgC,EAAA,+EAEQC,MAAM,kCAAmC,CAC5De,QAAS,CACL,eAAgB,oBAEpBC,OAAQ,OACRO,KAAMC,KAAKC,UAAU,CACjBX,GAAI/C,EAAK+C,GACTlC,MAAOb,EAAKmG,WAAWtF,MACvBG,QAAShB,EAAKmG,WAAWnF,QACzBG,YAAanB,EAAKmG,WAAWhF,YAC7BE,SAAUrB,EAAKmG,WAAW9E,SAC1Bd,MAAK,UAAEP,EAAKmG,WAAWC,kBAAlB,aAAE,EAA4BC,cAb5B,WAETnE,EAFS,QAiBDC,GAjBC,gCAkBaD,EAASG,OAlBtB,aAkBLiE,EAlBK,OAmBL,IAAIlE,MAAMkE,EAAUC,SAAW,yBAnB1B,wBAsBIrE,EAASG,OAtBb,SAsBTA,EAtBS,QAwBNe,QACLkB,EAAOkC,KAAK,YAAanE,EAAKC,KAAKzB,OAEnC4B,IAAMgE,QAAQ,8BAA+B,CACzC/D,SAAUD,IAAME,SAASC,aA5BlB,kDAgCfL,QAAQC,MAAM,qBAAd,MACAC,IAAMD,MAAM,sBAAwB,KAAM+D,QAAS,CAC/C7D,SAAUD,IAAME,SAASC,aAlCd,0DAAH,sDAsCpB,OACI,eAACiB,EAAA,EAAD,CAAWvD,UAAU,WAArB,UACI,cAACyD,EAAA,EAAD,CAAKzD,UAAU,OAAf,SACKsD,GAASA,EAAMK,KAAI,SAACjE,EAAM0G,GAAP,OAChB,cAACxC,EAAA,EAAD,CAAiB5D,UAAU,OAA3B,SACI,eAACJ,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,QAASO,OAAQ,QAASN,gBAAiB,WAAaC,UAAU,MAAxF,UACKN,EAAKmG,WAAWC,YACb,cAAClG,EAAA,EAAKM,IAAN,CACIC,QAAQ,MACRC,IAAKV,EAAKmG,WAAWC,WAAWC,UAChClG,MAAO,CAAEQ,OAAQ,OAGzB,eAACT,EAAA,EAAKU,KAAN,WACI,cAACV,EAAA,EAAKY,MAAN,UAAad,EAAKmG,WAAWtF,QAC5Bb,EAAKmG,WAAWnF,SACb,eAACd,EAAA,EAAKY,MAAN,CAAYR,UAAU,yBAAyBH,MAAO,CAAEwG,SAAU,UAAlE,iBACS3G,EAAKmG,WAAWnF,QAAQE,KAAK,SAGzClB,EAAKmG,WAAWhF,aACb,cAACjB,EAAA,EAAKe,KAAN,UAAYjB,EAAKmG,WAAWhF,YAAYC,OAAO,EAAG,OAErDpB,EAAKmG,WAAW9E,UACb,cAACnB,EAAA,EAAKe,KAAN,UACI,mBAAGK,KAAMtB,EAAKmG,WAAW9E,SAAUE,OAAO,SAASC,IAAI,aAAvD,4BAKR,qBAAKlB,UAAU,OAAf,SACI,cAACmB,EAAA,EAAD,CAAQmF,KAAK,KAAKnG,QAAQ,UAAUiB,QAAS,kBAAMwE,EAAelG,IAAlE,gCA3BN0G,QAsClB,oBAAIpG,UAAU,OAAd,+BACA,cAACyD,EAAA,EAAD,CAAKzD,UAAU,OAAf,SACKmF,EAAiBzB,OAAS,EACvByB,EAAiBxB,KAAI,SAACjE,EAAM0G,GAAP,OACjB,cAACxC,EAAA,EAAD,CAAiB5D,UAAU,OAA3B,SACI,eAACJ,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,QAASO,OAAQ,QAASN,gBAAiB,WAAaC,UAAU,MAAxF,UACKN,EAAKO,MACF,cAACL,EAAA,EAAKM,IAAN,CAAUC,QAAQ,MAAMC,IAAKV,EAAKO,MAAOJ,MAAO,CAAEQ,OAAQ,OAE1D,cAACT,EAAA,EAAKM,IAAN,CAAUC,QAAQ,MAAMC,IAAI,wBAAwBP,MAAO,CAAEQ,OAAQ,OAEzE,eAACT,EAAA,EAAKU,KAAN,WACI,cAACV,EAAA,EAAKY,MAAN,UAAad,EAAKa,OAAS,aAC1Bb,EAAKgB,SACF,eAACd,EAAA,EAAKe,KAAN,CAAWX,UAAU,yBAArB,iBACSN,EAAKgB,QAAQE,KAAK,SAG9BlB,EAAKqB,UACF,cAACnB,EAAA,EAAKe,KAAN,UACI,mBAAGK,KAAMtB,EAAKqB,SAAUE,OAAO,SAASC,IAAI,aAA5C,mCAhBVkF,MA0Bd,oE,gBEzCLG,MAvIf,WAAmB,IAAD,EACOvB,IAAZH,EADK,sBAEgBvD,oBAAS,GAFzB,mBAEPkF,EAFO,KAEEC,EAFF,OAGYnF,oBAAS,GAHrB,mBAGPY,EAHO,KAGAwE,EAHA,KAKRC,EAAWC,mBAmCXC,EAAe,uCAAG,WAAOC,GAAP,mBAAApF,EAAA,yDACxBoF,EAAEC,iBACFN,GAAW,GACXC,GAAS,GAHe,SAMdM,EAAQL,EAASM,QAAQlC,MAAMmC,OACrCjF,QAAQW,IAAI,iBAAkBoE,GAGzBA,EAVe,wBAWhB7E,IAAMD,MAAM,8BAA+B,CACvCE,SAAUD,IAAME,SAASC,aAE7BmE,GAAW,GAdK,4CAkBG9E,MAAM,iDAAD,OACyBqF,EADzB,gBACsCG,4CAnB9C,YAkBdvF,EAlBc,QAsBNC,GAtBM,uBAuBV,IAAIC,EAAJ,iBAAoBF,EAAS8D,aAvBnB,yBA0BC9D,EAASG,OA1BV,QA0BdqF,EA1Bc,OA2BpBnF,QAAQW,IAAI,gBAAiBwE,GAExBA,EAAOC,OAAiC,IAAxBD,EAAOC,MAAM3D,OAK9BmB,EAAS,CAAEL,KAAM,eAAgBC,QAAS2C,EAAOC,QAJjDlF,IAAMmF,KAAK,kCAAmC,CAC1ClF,SAAUD,IAAME,SAASC,aA/Bb,kDAqCpBoE,GAAS,GACTzE,QAAQC,MAAR,MACAC,IAAMD,MAAM,yBAA2B,KAAI+D,QAAS,CAChD7D,SAAUD,IAAME,SAASC,aAxCT,yBA2CpBmE,GAAW,GACXE,EAASM,QAAQlC,MAAQ,GACzB4B,EAASM,QAAQM,QA7CG,6EAAH,sDAmDrB,OAAIf,EAEI,+BACI,cAAC,EAAD,MAKRtE,EAEI,+BACI,cAAC,EAAD,MAMR,qCACI,cAACsF,EAAA,EAAD,CAAWhE,OAAK,EAACxD,UAAU,YAA3B,SACI,eAACuD,EAAA,EAAD,CAAWvD,UAAU,+DAArB,UACI,oBAAIA,UAAU,iCAAd,iDACA,uBAAMyH,SAAUZ,EAAhB,UACI,uBAAOa,QAAQ,UACf,uBACI1H,UAAU,eACV2H,UAAQ,EACRlF,GAAG,QACHmF,KAAK,QACLC,IAAKlB,EACLmB,YAAY,mCACZtD,KAAK,SAET,cAACrD,EAAA,EAAD,CAAQmF,KAAK,KAAK9B,KAAK,SAAvB,4BAOZ,cAAC,EAAD,Q,OC5MGuD,MAhCf,WAAmB,IAAD,EACkBzG,oBAAS,GAD3B,mBACP0G,EADO,KACGC,EADH,KAERC,EAAWC,cAWpB,OATG1G,qBAAU,WACmB,UAAtByG,EAASE,UACRH,GAAY,GAES,MAAtBC,EAASE,UACRH,GAAY,KAEjB,CAACC,EAASE,WAGf,sBAAKpI,UAAU,SAAf,UACC,qBAAKA,UAAU,eAAf,SACC,eAAC,IAAD,CAAMiE,GAAG,IAAT,UAAa,qBAAK7D,IAAI,uBAAuBP,MAAO,CAACC,MAAO,IAAKO,OAAQ,IAAKgI,IAAI,cAAlF,SAGD,qBAAIrI,UAAU,eAAd,UACcgI,GAAY,oBAAIhI,UAAU,cAAd,SACxB,cAAC,IAAD,CAAMiE,GAAG,UAAT,+BAEa+D,GAAY,oBAAIhI,UAAU,cAAd,SACzB,cAAC,IAAD,CAAMiE,GAAG,QAAT,yC,yBCNUqE,MAjBf,WACC,OACC,iCACC,cAAC,IAAD,CAAQC,GAAG,OAAOC,MAAM,SAASxI,UAAU,gCAA3C,SACC,gCACC,eAAC,IAAD,CAAMiE,GAAG,IAAIjE,UAAU,OAAvB,UACC,cAAC,IAAD,CAAYsG,KAAM,GAAIzG,MAAO,CAAE4I,KAAM,UAAa,OAC3C,IACO,cAAC,IAAD,CAAMxE,GAAG,QAAQjE,UAAU,OAA3B,SACI,cAAE,IAAF,CAAcsG,KAAO,GAAKzG,MAAQ,CAAE4I,KAAM,oBCHnDC,MATf,YAA8B,IAAZR,EAAW,EAAXA,SACd,OACI,sBAAMlI,UAAU,kBAAhB,UACK,wDAA0B,+BAAOkI,EAASE,cAC1C,+BAAI,cAAC,IAAD,CAAMnE,GAAG,IAAT,wBAAJ,0B,0BCiFE0E,MAnFf,YAAgC,IAAfC,EAAc,EAAdA,WAAc,EACKtH,mBAAS,CACrCuH,MAAO,GACPC,SAAU,KAHa,mBACpBC,EADoB,KACVC,EADU,OAKD1H,mBAAS,IALR,mBAKpBY,EALoB,KAKbwE,EALa,OAMGpF,mBAAS,IANZ,mBAMpBwB,EANoB,KAMXmG,EANW,KAOrBC,EAAUC,cAEVC,EAAe,SAACtC,GAAO,IAAD,EACAA,EAAE7F,OAAlB2G,EADgB,EAChBA,KAAM7C,EADU,EACVA,MACdiE,EAAY,2BAAKD,GAAN,kBAAiBnB,EAAO7C,MAGjCsE,EAAY,uCAAG,WAAOvC,GAAP,iBAAApF,EAAA,6DACjBoF,EAAEC,iBACFL,EAAS,IACTuC,EAAW,IAHM,kBAMUtH,MAAM,uCAAwC,CACjEgB,OAAQ,OACRD,QAAS,CACL,eAAgB,oBAEpBQ,KAAMC,KAAKC,UAAU2F,KAXZ,cAMPnH,EANO,gBAaMA,EAASG,OAbf,QAaPC,EAbO,QAeJc,SACLmG,EAAW,qBAEXK,YAAW,WACPJ,EAAQK,KAAK,WACd,MAEH7C,EAAS1E,EAAKiE,SAAW,mCAtBhB,kDAyBbS,EAAS,8CAzBI,0DAAH,sDA6BlB,OACI,eAACnD,EAAA,EAAD,CAAWvD,UAAU,OAArB,UACI,oBAAIA,UAAU,cAAd,mBACCkC,GAAS,cAACsH,EAAA,EAAD,CAAOrJ,QAAQ,SAAf,SAAyB+B,IAClCY,GAAW,cAAC0G,EAAA,EAAD,CAAOrJ,QAAQ,UAAf,SAA0B2C,IACtC,eAAC2G,EAAA,EAAD,CAAMhC,SAAU4B,EAAhB,UACI,eAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,YAAtB,UACI,cAACF,EAAA,EAAKG,MAAN,4BACA,cAACH,EAAA,EAAKI,QAAN,CACIrF,KAAK,QACLsD,YAAY,cACZF,KAAK,QACLkC,SAAUV,EACVzB,UAAQ,OAIhB,eAAC8B,EAAA,EAAKC,MAAN,CAAYC,UAAU,eAAtB,UACI,cAACF,EAAA,EAAKG,MAAN,uBACA,cAACH,EAAA,EAAKI,QAAN,CACIrF,KAAK,WACLsD,YAAY,WACZF,KAAK,WACLkC,SAAUV,EACVzB,UAAQ,OAIhB,cAACxG,EAAA,EAAD,CAAQhB,QAAQ,UAAUqE,KAAK,SAASxE,UAAU,QAAlD,sBAIJ,sBAAKA,UAAU,mBAAf,UACI,2DACA,cAAC,IAAD,CAAMiE,GAAG,IAAI7C,QAAS,kBAAMwH,GAAW,IAAvC,yCCiBDmB,MA9Ff,YAAiC,IAAfnB,EAAc,EAAdA,WAAc,EACItH,mBAAS,CACrCuH,MAAO,GACPC,SAAU,KAHc,mBACrBC,EADqB,KACXC,EADW,OAKF1H,mBAAS,IALP,mBAKrBY,EALqB,KAKdwE,EALc,OAMEpF,mBAAS,IANX,mBAMrBwB,EANqB,KAMZmG,EANY,OAOE3H,oBAAS,GAPX,mBAOrBkF,EAPqB,KAOZC,EAPY,KAQtByC,EAAUC,cAEVC,EAAe,SAACtC,GAAO,IAAD,EACAA,EAAE7F,OAAlB2G,EADgB,EAChBA,KAAM7C,EADU,EACVA,MACdiE,EAAY,2BAAKD,GAAN,kBAAiBnB,EAAO7C,MAGjCsE,EAAY,uCAAG,WAAOvC,GAAP,iBAAApF,EAAA,6DACjBoF,EAAEC,iBACFL,EAAS,IACTuC,EAAW,IACXxC,GAAW,GAJM,kBAOU9E,MAAM,yCAA0C,CACnEgB,OAAQ,OACRD,QAAS,CACL,eAAgB,oBAEpBQ,KAAMC,KAAKC,UAAU2F,KAZZ,cAOPnH,EAPO,iBAeMA,EAASG,OAff,SAePC,EAfO,QAiBJc,SACLmG,EAAW,yDAEXK,YAAW,WACPJ,EAAQK,KAAK,OACd,MAEH7C,EAAS1E,EAAKiE,SAAW,oCAxBhB,kDA2BbS,EAAS,8CA3BI,yBA6BbD,GAAW,GA7BE,6EAAH,sDAiClB,OACI,eAAClD,EAAA,EAAD,CAAWvD,UAAU,OAArB,UACI,oBAAIA,UAAU,cAAd,4BACCkC,GAAS,cAACsH,EAAA,EAAD,CAAOrJ,QAAQ,SAAf,SAAyB+B,IAClCY,GAAW,cAAC0G,EAAA,EAAD,CAAOrJ,QAAQ,UAAf,SAA0B2C,IACtC,eAAC2G,EAAA,EAAD,CAAMhC,SAAU4B,EAAhB,UACI,eAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,YAAtB,UACI,cAACF,EAAA,EAAKG,MAAN,4BACA,cAACH,EAAA,EAAKI,QAAN,CACIrF,KAAK,QACLsD,YAAY,cACZF,KAAK,QACLkC,SAAUV,EACVzB,UAAQ,OAIhB,eAAC8B,EAAA,EAAKC,MAAN,CAAYC,UAAU,eAAtB,UACI,cAACF,EAAA,EAAKG,MAAN,uBACA,cAACH,EAAA,EAAKI,QAAN,CACIrF,KAAK,WACLsD,YAAY,WACZF,KAAK,WACLkC,SAAUV,EACVzB,UAAQ,OAIhB,cAACxG,EAAA,EAAD,CAAQhB,QAAQ,UAAUqE,KAAK,SAASxE,UAAU,QAAQgK,SAAUxD,EAApE,SACKA,EACG,qCACI,cAAC1C,EAAA,EAAD,CAASC,UAAU,SAASuC,KAAK,OADrC,iBAIA,eAIZ,sBAAKtG,UAAU,mBAAf,UACI,6DACA,cAAC,IAAD,CAAMiE,GAAG,IAAI7C,QAAS,kBAAMwH,GAAW,IAAvC,0B,cCtDDqB,MAzBf,WAAgB,IAAD,EACgB3I,oBAAS,GADzB,mBACP4I,EADO,KACEtB,EADF,KAGd,OACC,cAAC,IAAD,UACC,eAAC,EAAD,WACC,cAAC,EAAD,IACA,uBAAM5I,UAAU,MAAhB,UACC,eAAC,IAAD,WAEC,cAAC,IAAD,CAAOmK,OAAK,EAACC,KAAK,IAAlB,SACEF,EAAU,cAAC,EAAD,CAAOtB,WAAYA,IAAiB,cAAC,EAAD,CAAQA,WAAYA,MAEpE,cAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,QAAQC,UAAWhJ,IACrC,cAAC,IAAD,CAAO8I,OAAK,EAACC,KAAK,UAAUC,UAAW9D,IACvC,cAAC,IAAD,CAAO8D,UAAW3B,OAEnB,cAAC,IAAD,CAAgB4B,WAAYC,IAAMC,UAAW,SAE9C,cAAC,EAAD,UC3BJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.4182a4ae.chunk.js","sourcesContent":["// BookCard.jsx\r\nimport React from 'react';\r\nimport { Card, Button } from 'react-bootstrap';\r\n\r\nfunction BookCard({ book, onDelete }) {\r\n    return (\r\n        <Card style={{ width: '325px', backgroundColor: '#dcf8e8' }} className='p-4'>\r\n            {book.image && <Card.Img variant='top' src={book.image} style={{ height: 320 }} />}\r\n            <Card.Body>\r\n                {book.title && <Card.Title style={{ color: '#306' }}>{book.title}</Card.Title>}\r\n                {book.authors && (\r\n                    <Card.Text className='font-italic text-muted'>{`By: ${book.authors.join(', ')}`}</Card.Text>\r\n                )}\r\n                {book.description && <Card.Text>{book.description.substr(0, 100)}...</Card.Text>}\r\n                {book.infoLink && (\r\n                    <Card.Text>\r\n                        <a href={book.infoLink} target='_blank' rel='noreferrer'>View Details</a>\r\n                    </Card.Text>\r\n                )}\r\n                <Button variant='warning' onClick={() => onDelete(book)}>Remove</Button>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default BookCard;\r\n","// // Save.jsx\r\n// import React, { useEffect, useState } from 'react';\r\n// import { Container, Row, Col } from 'react-bootstrap';\r\n// import { toast } from 'react-toastify';\r\n// import BookCard from './BookCard';\r\n\r\n// function Save() {\r\n//     const [savedBooks, setSavedBooks] = useState([]);\r\n\r\n//     useEffect(() => {\r\n//         async function getSavedBooks() {\r\n//             try {\r\n//                 const response = await fetch('http://localhost:3000/api/books');\r\n//                 if (!response.ok) {\r\n//                     throw new Error('Failed to fetch saved books');\r\n//                 }\r\n//                 const json = await response.json();\r\n//                 setSavedBooks(json.data);\r\n//             } catch (err) {\r\n//                 console.error(err);\r\n//                 toast.error('Error getting saved books', {\r\n//                     position: toast.POSITION.TOP_CENTER,\r\n//                 });\r\n//             }\r\n//         }\r\n//         getSavedBooks();\r\n//     }, []);\r\n\r\n//     const handleDeleteBook = async (book) => {\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/books/${book.id}`, {\r\n//                 headers: { 'Content-Type': 'application/json' },\r\n//                 method: 'DELETE',\r\n//             });\r\n            \r\n//             const json = await response.json();\r\n//             console.log(json);\r\n//             console.log(\"Deleting book with _id:\", book._id);\r\n\r\n//             if (json.success) {\r\n//                 setSavedBooks(savedBooks.filter(b => b._id !== book._id));\r\n//                 toast.success('The book has been removed successfully!', {\r\n//                     position: toast.POSITION.TOP_CENTER,\r\n//                 });\r\n//             } else {\r\n//                 toast.error('Error removing book', {\r\n//                     position: toast.POSITION.TOP_CENTER,\r\n//                 });\r\n//             }\r\n//         } catch (error) {\r\n//             console.log(error);\r\n//             toast.error('Error removing book', {\r\n//                 position: toast.POSITION.TOP_CENTER,\r\n//             });\r\n//         }\r\n//     };\r\n\r\n//     const sendEmail = async () => {\r\n//         try {\r\n//             const userEmail = \"kesavaprabhal.22cse@kongu.edu\"; // Replace with the actual logged-in user's email\r\n//             const response = await fetch('http://localhost:3000/api/send-email', {\r\n//                 method: 'POST',\r\n//                 headers: { 'Content-Type': 'application/json' },\r\n//                 body: JSON.stringify({ userEmail, books: savedBooks }),\r\n//             });\r\n\r\n//             if (!response.ok) throw new Error('Failed to send email');\r\n\r\n//             toast.success('Email sent successfully!', { position: toast.POSITION.TOP_CENTER });\r\n//         } catch (error) {\r\n//             console.error('Error sending email:', error);\r\n//             toast.error('Error sending email', { position: toast.POSITION.TOP_CENTER });\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <Container fluid className='my-5 p-3 ml-5'>\r\n//             <Row className='mx-auto'>\r\n//                 <h3 className='px-3 mx-5 font-weight-bold' style={{ color: '#fb2' }}>\r\n//                     Saved Books\r\n//                 </h3>\r\n//                 <button onClick={sendEmail} className=\"ml-3 btn btn-primary\">Send Saved Books to Email</button>\r\n//             </Row>\r\n\r\n//             <Row className='ml-5'>\r\n//                 {savedBooks.length > 0 ? (\r\n//                     savedBooks.map((book) => (\r\n//                         <Col key={book.id} className='my-3'>\r\n//                             <BookCard book={book} onDelete={handleDeleteBook} />\r\n//                         </Col>\r\n//                     ))\r\n//                 ) : (\r\n//                     <Col>\r\n//                         <h5>No saved books found.</h5>\r\n//                     </Col>\r\n//                 )}\r\n//             </Row>\r\n//         </Container>\r\n//     );\r\n// }\r\n\r\n// export default Save;\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport BookCard from './BookCard';\r\n\r\nfunction Save() {\r\n    const [savedBooks, setSavedBooks] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function getSavedBooks() {\r\n            try {\r\n                const response = await fetch('http://localhost:3000/api/books');\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch saved books');\r\n                }\r\n                const json = await response.json();\r\n                setSavedBooks(json.data);\r\n            } catch (err) {\r\n                console.error(err);\r\n                toast.error('Error getting saved books', {\r\n                    position: toast.POSITION.TOP_CENTER,\r\n                });\r\n            }\r\n        }\r\n        getSavedBooks();\r\n    }, []);\r\n\r\n    const handleDeleteBook = async (book) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:3000/api/books/${book.id}`, {\r\n                headers: { 'Content-Type': 'application/json' },\r\n                method: 'DELETE',\r\n            });\r\n            \r\n            const json = await response.json();\r\n            console.log(json);\r\n            console.log(\"Deleting book with _id:\", book._id);\r\n\r\n            if (json.success) {\r\n                setSavedBooks(savedBooks.filter(b => b._id !== book._id));\r\n                toast.success('The book has been removed successfully!', {\r\n                    position: toast.POSITION.TOP_CENTER,\r\n                });\r\n            } else {\r\n                toast.error('Error removing book', {\r\n                    position: toast.POSITION.TOP_CENTER,\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            toast.error('Error removing book', {\r\n                position: toast.POSITION.TOP_CENTER,\r\n            });\r\n        }\r\n    };\r\n\r\n    const sendEmail = async () => {\r\n        try {\r\n            const userEmail = \"kesavaprabhal.22cse@kongu.edu\"; // Replace with the actual logged-in user's email\r\n            const response = await fetch('http://localhost:3000/api/send-email', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ userEmail, books: savedBooks }),\r\n            });\r\n\r\n            if (!response.ok) throw new Error('Failed to send email');\r\n\r\n            toast.success('Email sent successfully!', { position: toast.POSITION.TOP_CENTER });\r\n        } catch (error) {\r\n            console.error('Error sending email:', error);\r\n            toast.error('Error sending email', { position: toast.POSITION.TOP_CENTER });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container fluid className='my-5 p-3 ml-5'>\r\n            <Row className='mx-auto'>\r\n                <h3 className='px-3 mx-5 font-weight-bold' style={{ color: '#fb2' }}>\r\n                    Saved Books\r\n                </h3>\r\n                <button onClick={sendEmail} className=\"ml-3 btn btn-primary\">Send Saved Books to Email</button>\r\n            </Row>\r\n\r\n            <Row className='ml-5'>\r\n                {savedBooks.length > 0 ? (\r\n                    savedBooks.map((book) => (\r\n                        <Col key={book.id} className='my-3'>\r\n                            <BookCard book={book} onDelete={handleDeleteBook} />\r\n                        </Col>\r\n                    ))\r\n                ) : (\r\n                    <Col>\r\n                        <h5>No saved books found.</h5>\r\n                    </Col>\r\n                )}\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Save;\r\n","import React from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nconst Loading = () => {\r\n\treturn (\r\n        <div className='m-5 p-5'>\r\n            <h1>Loading...</h1>\r\n            <Spinner animation=\"border\" variant=\"primary\" className='mx-5'/>\r\n            <Spinner animation=\"border\" variant=\"success\" />\r\n            <Spinner animation=\"border\" variant=\"danger\" className='mx-5'/>\r\n            <Spinner animation=\"border\" variant=\"warning\" />\r\n        </div>\r\n\t);\r\n};\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Error() {\r\n    return (\r\n        <div className='text-center m-5 p-5'>\r\n            <h1>404... Not Found</h1>;\r\n            <h2><Link to='/'>Click HERE</Link> to Search Books</h2>\r\n       </div>\r\n    )\r\n   \r\n}\r\n\r\nexport default Error;\r\n","// import React, { useEffect , useState} from 'react';\r\n// import { useGlobalContext } from '../../utils/GlobalContext';\r\n// import { Button, Container, Col, Row, Card } from 'react-bootstrap';\r\n// import { toast } from 'react-toastify';\r\n// import io from 'socket.io-client';\r\n\r\n// let socket;\r\n\r\n// function Results() {\r\n//     const [{ books }] = useGlobalContext(); // Destructure to get books\r\n\r\n//     // Set up socket instance and connection\r\n//     useEffect(() => {\r\n//         socket = io('http://localhost:3000'); // Ensure this URL matches your server setup\r\n\r\n//         socket.on('connect', () => {\r\n//             console.log('Connected to the socket server');\r\n//         });\r\n\r\n//         socket.on('saved book title', title => {\r\n//             toast.success(`Saved a book titled ${title}`, {\r\n//                 position: toast.POSITION.TOP_CENTER,\r\n//             });\r\n//         });\r\n\r\n//         socket.on('connect_error', err => {\r\n//             console.error('Socket connection error:', err);\r\n//         });\r\n\r\n//         return () => {\r\n//             socket.disconnect(); // Clean up on unmount\r\n//         };\r\n//     }, []);\r\n\r\n//     const handleSaveBook = async (book) => {\r\n//         try {\r\n//             const response = await fetch('http://localhost:3000/api/books', {\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 method: 'POST',\r\n//                 body: JSON.stringify({\r\n//                     id: book.id,\r\n//                     title: book.volumeInfo.title,\r\n//                     authors: book.volumeInfo.authors,\r\n//                     description: book.volumeInfo.description,\r\n//                     infoLink: book.volumeInfo.infoLink,\r\n//                     image: book.volumeInfo.imageLinks?.thumbnail,\r\n//                 }),\r\n//             });\r\n\r\n//             if (!response.ok) {\r\n//                 const errorJson = await response.json();\r\n//                 throw new Error(errorJson.message || 'Error saving the book');\r\n//             }\r\n\r\n//             const json = await response.json();\r\n\r\n//             if (json.success) {\r\n//                 socket.emit('save book', json.data.title);\r\n//             } else {\r\n//                 toast.warning('This book is already saved!', {\r\n//                     position: toast.POSITION.TOP_CENTER,\r\n//                 });\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error saving book:', error);\r\n//             toast.error('Error saving book: ' + error.message, {\r\n//                 position: toast.POSITION.TOP_CENTER,\r\n//             });\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <Container className='my-5 p-3'>\r\n//             <Row className='mx-5'>\r\n//                 {books && books.map((book, index) => (\r\n//                     <Col key={index} className='mb-4'>\r\n//                         <Card style={{ width: '300px', height: '700px', backgroundColor: '#deeaf7' }} className='p-4'>\r\n//                             {book.volumeInfo.imageLinks && (\r\n//                                 <Card.Img\r\n//                                     variant='top'\r\n//                                     src={book.volumeInfo.imageLinks.thumbnail}\r\n//                                     style={{ height: 320 }}\r\n//                                 />\r\n//                             )}\r\n//                             <Card.Body>\r\n//                                 <Card.Title>{book.volumeInfo.title}</Card.Title>\r\n//                                 {book.volumeInfo.authors && (\r\n//                                     <Card.Title className='font-italic text-muted' style={{ fontSize: '1.1rem' }}>\r\n//                                         By: {book.volumeInfo.authors.join(', ')}\r\n//                                     </Card.Title>\r\n//                                 )}\r\n//                                 {book.volumeInfo.description && (\r\n//                                     <Card.Text>{book.volumeInfo.description.substr(0, 100)}</Card.Text>\r\n//                                 )}\r\n//                                 {book.volumeInfo.infoLink && (\r\n//                                     <Card.Text>\r\n//                                         <a href={book.volumeInfo.infoLink} target='_blank' rel='noreferrer'>\r\n//                                             View Details\r\n//                                         </a>\r\n//                                     </Card.Text>\r\n//                                 )}\r\n//                                 <div className='mt-4'>\r\n//                                     <Button size='sm' variant='warning' onClick={() => handleSaveBook(book)}>\r\n//                                         Save Book\r\n//                                     </Button>\r\n//                                 </div>\r\n//                             </Card.Body>\r\n//                         </Card>\r\n//                     </Col>\r\n//                 ))}\r\n//             </Row>\r\n//         </Container>\r\n//     );\r\n// }\r\n\r\n// export default Results;\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useGlobalContext } from '../../utils/GlobalContext';\r\nimport { Button, Container, Col, Row, Card } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport io from 'socket.io-client';\r\n\r\nlet socket;\r\n\r\nfunction Results() {\r\n    const [{ books }] = useGlobalContext(); // Destructure to get books\r\n    const [recommendedBooks, setRecommendedBooks] = useState([]); // State for recommendations\r\n\r\n    // Set up socket instance and connection\r\n    useEffect(() => {\r\n        socket = io('http://localhost:3000'); // Ensure this URL matches your server setup\r\n\r\n        socket.on('connect', () => {\r\n            console.log('Connected to the socket server');\r\n        });\r\n\r\n        socket.on('saved book title', title => {\r\n            toast.success(`Saved a book titled ${title}`, {\r\n                position: toast.POSITION.TOP_CENTER,\r\n            });\r\n        });\r\n\r\n        socket.on('connect_error', err => {\r\n            console.error('Socket connection error:', err);\r\n        });\r\n\r\n        return () => {\r\n            socket.disconnect(); // Clean up on unmount\r\n        };\r\n    }, []);\r\n\r\n    // Function to fetch recommendations\r\n    useEffect(() => {\r\n        const fetchRecommendations = async () => {\r\n            try {\r\n                // const searchTerm = \"F. Scott Fitzgerald\"; // Use a relevant term\r\n                const response = await fetch('http://localhost:3000/api/recommendations');\r\n                if (response.ok) {\r\n                    const data = await response.json();\r\n                    setRecommendedBooks(data);\r\n                } else {\r\n                    console.warn('Failed to fetch recommendations:', response.statusText);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching recommendations:', error);\r\n            }\r\n        };\r\n    \r\n        fetchRecommendations();\r\n    }, []); // The empty array ensures this runs only once on mount\r\n    \r\n\r\n    const handleSaveBook = async (book) => {\r\n        try {\r\n            const response = await fetch('http://localhost:3000/api/books', {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    id: book.id,\r\n                    title: book.volumeInfo.title,\r\n                    authors: book.volumeInfo.authors,\r\n                    description: book.volumeInfo.description,\r\n                    infoLink: book.volumeInfo.infoLink,\r\n                    image: book.volumeInfo.imageLinks?.thumbnail,\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorJson = await response.json();\r\n                throw new Error(errorJson.message || 'Error saving the book');\r\n            }\r\n\r\n            const json = await response.json();\r\n\r\n            if (json.success) {\r\n                socket.emit('save book', json.data.title);\r\n            } else {\r\n                toast.warning('This book is already saved!', {\r\n                    position: toast.POSITION.TOP_CENTER,\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error('Error saving book:', error);\r\n            toast.error('Error saving book: ' + error.message, {\r\n                position: toast.POSITION.TOP_CENTER,\r\n            });\r\n        }\r\n    };\r\n    return (\r\n        <Container className='my-5 p-3'>\r\n            <Row className='mx-5'>\r\n                {books && books.map((book, index) => (\r\n                    <Col key={index} className='mb-4'>\r\n                        <Card style={{ width: '300px', height: '700px', backgroundColor: '#deeaf7' }} className='p-4'>\r\n                            {book.volumeInfo.imageLinks && (\r\n                                <Card.Img\r\n                                    variant='top'\r\n                                    src={book.volumeInfo.imageLinks.thumbnail}\r\n                                    style={{ height: 320 }}\r\n                                />\r\n                            )}\r\n                            <Card.Body>\r\n                                <Card.Title>{book.volumeInfo.title}</Card.Title>\r\n                                {book.volumeInfo.authors && (\r\n                                    <Card.Title className='font-italic text-muted' style={{ fontSize: '1.1rem' }}>\r\n                                        By: {book.volumeInfo.authors.join(', ')}\r\n                                    </Card.Title>\r\n                                )}\r\n                                {book.volumeInfo.description && (\r\n                                    <Card.Text>{book.volumeInfo.description.substr(0, 100)}</Card.Text>\r\n                                )}\r\n                                {book.volumeInfo.infoLink && (\r\n                                    <Card.Text>\r\n                                        <a href={book.volumeInfo.infoLink} target='_blank' rel='noreferrer'>\r\n                                            View Details\r\n                                        </a>\r\n                                    </Card.Text>\r\n                                )}\r\n                                <div className='mt-4'>\r\n                                    <Button size='sm' variant='warning' onClick={() => handleSaveBook(book)}>\r\n                                        Save Book\r\n                                    </Button>\r\n                                </div>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                ))}\r\n            </Row>\r\n    \r\n            {/* Recommendations Section */}\r\n            <h3 className='my-5'>You May Also Like</h3>\r\n            <Row className='mx-5'>\r\n                {recommendedBooks.length > 0 ? (\r\n                    recommendedBooks.map((book, index) => (\r\n                        <Col key={index} className='mb-4'>\r\n                            <Card style={{ width: '300px', height: '700px', backgroundColor: '#deeaf7' }} className='p-4'>\r\n                                {book.image ? (\r\n                                    <Card.Img variant='top' src={book.image} style={{ height: 320 }} />\r\n                                ) : (\r\n                                    <Card.Img variant='top' src='default-thumbnail.jpg' style={{ height: 320 }} />\r\n                                )}\r\n                                <Card.Body>\r\n                                    <Card.Title>{book.title || 'Untitled'}</Card.Title>\r\n                                    {book.authors && (\r\n                                        <Card.Text className='font-italic text-muted'>\r\n                                            By: {book.authors.join(', ')}\r\n                                        </Card.Text>\r\n                                    )}\r\n                                    {book.infoLink && (\r\n                                        <Card.Text>\r\n                                            <a href={book.infoLink} target='_blank' rel='noreferrer'>\r\n                                                View Details\r\n                                            </a>\r\n                                        </Card.Text>\r\n                                    )}\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>\r\n                    ))\r\n                ) : (\r\n                    <p>No recommendations available.</p>\r\n                )}\r\n            </Row>\r\n        </Container>\r\n    );\r\n    \r\n\r\n}\r\nexport default Results;\r\n","import { useContext, useReducer, createContext } from 'react';\r\n\r\n//setup  global context\r\nexport const GlobalContext = createContext();\r\n\r\n// set  up  global provider and reducer\r\nconst initState = {\r\n\tbooks: []\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n\t\r\n\tswitch (action.type) {\r\n        case 'searchResult':\r\n            return {\r\n                ...state,\r\n                books: action.payload\r\n            };\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst GlobalProvider = props => {\r\n    const [ state, dispatch ] = useReducer(reducer, initState);\r\n\treturn <GlobalContext.Provider value={[ state, dispatch ]} {...props} />;\r\n};\r\n\r\n\r\n//export GlobalProvider\r\nexport default GlobalProvider;\r\n\r\nexport const useGlobalContext = () => {\r\n\r\n\treturn useContext(GlobalContext);\r\n};\r\n","// import React, { useRef, useState } from 'react';\r\n// import Loading from '../components/Loading';\r\n// import Error from '../components/Error';\r\n// import Results from '../components/Results';\r\n// import { useGlobalContext } from '../utils/GlobalContext';\r\n// import { Button, Container, Jumbotron } from 'react-bootstrap';\r\n// import { toast } from 'react-toastify';\r\n// import './Search.css';\r\n\r\n// function Search() {\r\n//     const [, dispatch] = useGlobalContext();\r\n//     const [loading, setLoading] = useState(false);\r\n//     const [error, setError] = useState(false);\r\n\r\n//     const queryRef = useRef();\r\n\r\n//     const handleFetchBook = async (e) => {\r\n//         e.preventDefault();\r\n//         setLoading(true);\r\n//         setError(false); // Reset error state on new search\r\n\r\n//         try {\r\n//             let query = queryRef.current.value;\r\n\r\n//             const response = await fetch(\r\n//                 `https://www.googleapis.com/books/v1/volumes?q=${query}&key=${process.env.REACT_APP_BOOK_API_KEY}`\r\n//             );\r\n\r\n//             if (!response.ok) {\r\n//                 setLoading(false);\r\n//                 setError(true);\r\n//                 toast.error('Error fetching books: ' + response.statusText, {\r\n//                     position: toast.POSITION.TOP_CENTER\r\n//                 });\r\n//                 return;\r\n//             }\r\n\r\n//             const result = await response.json();\r\n//             dispatch({ type: 'searchResult', payload: result.items });\r\n//             setLoading(false);\r\n//         } catch (err) {\r\n//             setLoading(false);\r\n//             console.error(err);\r\n//             toast.error('Error fetching books', {\r\n//                 position: toast.POSITION.TOP_CENTER\r\n//             });\r\n//         }\r\n\r\n//         if (queryRef.current) {\r\n//             queryRef.current.value = '';\r\n//             queryRef.current.focus();\r\n//         }\r\n//     };\r\n\r\n//     if (loading) {\r\n//         return (\r\n//             <main>\r\n//                 <Loading />\r\n//             </main>\r\n//         );\r\n//     }\r\n\r\n//     if (error) {\r\n//         return (\r\n//             <main>\r\n//                 <Error />\r\n//             </main>\r\n//         );\r\n//     }\r\n\r\n//     return (\r\n//         <>\r\n//             <Jumbotron fluid className='jumbotron'>\r\n//                 <Container className='d-flex flex-column justify-content-center align-items-center'>\r\n//                     <h1 className='Search-title bg-light p-1 mt-5'>Discover the Book  of Your Interests</h1>\r\n//                     <form onSubmit={handleFetchBook}>\r\n//                         <label htmlFor='query' />\r\n//                         <input\r\n//                             className='Search-input'\r\n//                             required\r\n//                             id='query'\r\n//                             name='query'\r\n//                             ref={queryRef}\r\n//                             placeholder='Enter a Book or Author name ... '\r\n//                             type='text'\r\n//                         />\r\n//                         <Button size='sm' type='submit'>\r\n//                             Search\r\n//                         </Button>\r\n//                     </form>\r\n//                 </Container>\r\n//             </Jumbotron>\r\n\r\n//             <Results />\r\n//         </>\r\n//     );\r\n// }\r\n\r\n// export default Search;\r\n\r\n\r\n\r\nimport React, { useRef, useState } from 'react';\r\nimport Loading from '../components/Loading';\r\nimport Error from '../components/Error';\r\nimport Results from '../components/Results';\r\nimport { useGlobalContext } from '../utils/GlobalContext';\r\nimport { Button, Container, Jumbotron } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport './Search.css';\r\n\r\nfunction Search() {\r\n    const [, dispatch] = useGlobalContext();\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n\r\n    const queryRef = useRef();\r\n\r\n    // const handleFetchBook = async (e) => {\r\n    //     e.preventDefault();\r\n    //     setLoading(true);\r\n    //     setError(false); // Reset error state on new search\r\n\r\n    //     try {\r\n    //         const query = queryRef.current.value.trim(); // Trim whitespace\r\n    //         console.log('Searching for:', query);\r\n\r\n    //         const response = await fetch(\r\n    //             `https://www.googleapis.com/books/v1/volumes?q=${query}&key=${process.env.REACT_APP_BOOK_API_KEY}`\r\n    //         );\r\n\r\n    //         if (!response.ok) {\r\n    //             throw new Error(`Error: ${response.statusText}`);\r\n    //         }\r\n\r\n    //         const result = await response.json();\r\n    //         console.log('API Response:', result); // Log the result\r\n    //         dispatch({ type: 'searchResult', payload: result.items });\r\n    //     } catch (err) {\r\n    //         setError(true);\r\n    //         console.error(err);\r\n    //         toast.error('Error fetching books: ' + err.message, {\r\n    //             position: toast.POSITION.TOP_CENTER\r\n    //         });\r\n    //     } finally {\r\n    //         setLoading(false);\r\n    //         queryRef.current.value = '';\r\n    //         queryRef.current.focus();\r\n    //     }\r\n    // };\r\n\r\n    const handleFetchBook = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setError(false); // Reset error state on new search\r\n\r\n    try {\r\n        const query = queryRef.current.value.trim(); // Trim whitespace\r\n        console.log('Searching for:', query); // Log the search term\r\n\r\n        // Check if query is empty\r\n        if (!query) {\r\n            toast.error('Please enter a search term.', {\r\n                position: toast.POSITION.TOP_CENTER\r\n            });\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        const response = await fetch(\r\n            `https://www.googleapis.com/books/v1/volumes?q=${query}&key=${process.env.REACT_APP_BOOK_API_KEY}`\r\n        );\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Error: ${response.statusText}`);\r\n        }\r\n\r\n        const result = await response.json();\r\n        console.log('API Response:', result); // Log the result\r\n\r\n        if (!result.items || result.items.length === 0) {\r\n            toast.info('No books found for this search.', {\r\n                position: toast.POSITION.TOP_CENTER\r\n            });\r\n        } else {\r\n            dispatch({ type: 'searchResult', payload: result.items });\r\n        }\r\n    } catch (err) {\r\n        setError(true);\r\n        console.error(err);\r\n        toast.error('Error fetching books: ' + err.message, {\r\n            position: toast.POSITION.TOP_CENTER\r\n        });\r\n    } finally {\r\n        setLoading(false);\r\n        queryRef.current.value = '';\r\n        queryRef.current.focus();\r\n    }\r\n};\r\n\r\n    \r\n\r\n    if (loading) {\r\n        return (\r\n            <main>\r\n                <Loading />\r\n            </main>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <main>\r\n                <Error />\r\n            </main>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Jumbotron fluid className='jumbotron'>\r\n                <Container className='d-flex flex-column justify-content-center align-items-center'>\r\n                    <h1 className='Search-title bg-light p-1 mt-5'>Discover the Book of Your Interests</h1>\r\n                    <form onSubmit={handleFetchBook}>\r\n                        <label htmlFor='query' />\r\n                        <input\r\n                            className='Search-input'\r\n                            required\r\n                            id='query'\r\n                            name='query'\r\n                            ref={queryRef}\r\n                            placeholder='Enter a Book or Author name ... '\r\n                            type='text'\r\n                        />\r\n                        <Button size='sm' type='submit'>\r\n                            Search\r\n                        </Button>\r\n                    </form>\r\n                </Container>\r\n            </Jumbotron>\r\n\r\n            <Results />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React, {useState, useEffect} from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport './Navbar.css';\r\n\r\n\r\nfunction Navbar() {\r\n    const [isSearch, setIsSearch] = useState(false)\r\n    const location = useLocation();\r\n    \r\n    useEffect(() => {\r\n        if(location.pathname === '/save') {\r\n            setIsSearch(true)\r\n        }  \r\n        if(location.pathname === '/')  {\r\n            setIsSearch(false)\r\n        }   \r\n    }, [location.pathname])\r\n\r\n\treturn (\r\n\t\t<nav className='Navbar'>\r\n\t\t\t<div className='Navbar-brand'>\r\n\t\t\t\t<Link to='/'><img src='assets/book-logo.png' style={{width: 120, height: 60}} alt='book-logo'/> </Link>\r\n\t\t\t</div>\r\n            \r\n\t\t\t<ul className='Navbar-links'>\r\n                {isSearch && <li className='Navbar-link'>\r\n\t\t\t\t\t<Link to='/search'> Search Books </Link>\r\n\t\t\t\t</li>}\r\n                {!isSearch && <li className='Navbar-link'>\r\n\t\t\t\t\t<Link to='/save'> View Saved Books </Link>\r\n\t\t\t\t</li>}\t\t\r\n                \t\r\n\t\t\t</ul>\r\n\t\t</nav>\r\n\t);\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport { AiFillHome } from 'react-icons/ai';\r\nimport { BsBookmarks } from 'react-icons/bs';\r\n\r\nfunction Footer () {\r\n\treturn (\r\n\t\t<footer>\r\n\t\t\t<Navbar bg='dark' fixed='bottom' className='Footer justify-content-around'>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Link to='/' className='pl-2'>\r\n\t\t\t\t\t\t<AiFillHome size={22} style={{ fill: '#1c0' }} />{' '}\r\n\t\t\t\t\t</Link>{' '}\r\n                    <Link to='/save' className='px-2'>\r\n                        < BsBookmarks size={ 20 } style={ { fill: '#fb2' } } />\r\n                    </Link>\r\n\t\t\t\t</div>\r\n\t\t\t</Navbar>\r\n\t\t</footer>\r\n\t);\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction NoMatch({location}) {\r\n    return (\r\n        <div  className='text-center m-5'>\r\n             <h2>No match for the path <code>{location.pathname}</code></h2>\r\n             <h3><Link to='/'>Click HERE</Link> to Search Books</h3>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default NoMatch;\r\n\r\n\r\n\r\n","// Login.jsx\r\nimport React, { useState } from 'react';\r\nimport { Container, Form, Button, Alert } from 'react-bootstrap';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nfunction Login({ setIsLogin }) {\r\n    const [formData, setFormData] = useState({\r\n        email: '',\r\n        password: '',\r\n    });\r\n    const [error, setError] = useState('');\r\n    const [success, setSuccess] = useState('');\r\n    const history = useHistory(); // Use useHistory for navigation\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData({ ...formData, [name]: value });\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setSuccess('');\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:3000/api/auth/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(formData),\r\n            });\r\n            const data = await response.json();\r\n\r\n            if (data.success) {\r\n                setSuccess('Login successful!'); \r\n                // Redirect to a specific page, e.g., the saved books page\r\n                setTimeout(() => {\r\n                    history.push('/save'); // Redirect to the Save page\r\n                }, 2000);\r\n            } else {\r\n                setError(data.message || 'Login failed. Please try again.');\r\n            }\r\n        } catch (err) {\r\n            setError('An error occurred. Please try again later.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container className=\"mt-5\">\r\n            <h2 className=\"text-center\">Login</h2>\r\n            {error && <Alert variant=\"danger\">{error}</Alert>}\r\n            {success && <Alert variant=\"success\">{success}</Alert>}\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group controlId=\"formEmail\">\r\n                    <Form.Label>Email address</Form.Label>\r\n                    <Form.Control\r\n                        type=\"email\"\r\n                        placeholder=\"Enter email\"\r\n                        name=\"email\"\r\n                        onChange={handleChange}\r\n                        required\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formPassword\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        name=\"password\"\r\n                        onChange={handleChange}\r\n                        required\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Button variant=\"primary\" type=\"submit\" className=\"w-100\">\r\n                    Login\r\n                </Button>\r\n            </Form>\r\n            <div className=\"text-center mt-3\">\r\n                <span>Don't have an account? </span>\r\n                <Link to=\"#\" onClick={() => setIsLogin(false)}>Create a new account</Link>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","// Signup.jsx\r\nimport React, { useState } from 'react';\r\nimport { Container, Form, Button, Alert, Spinner } from 'react-bootstrap';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nfunction Signup({ setIsLogin }) {\r\n    const [formData, setFormData] = useState({\r\n        email: '',\r\n        password: '',\r\n    });\r\n    const [error, setError] = useState('');\r\n    const [success, setSuccess] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const history = useHistory(); // Use useHistory for navigation\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData({ ...formData, [name]: value });\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setSuccess('');\r\n        setLoading(true); // Set loading to true\r\n\r\n        try {\r\n            const response = await fetch('https://localhost:3000/api/auth/signup', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(formData),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.success) {\r\n                setSuccess('Account created successfully! Redirecting to login...');\r\n                // Redirect after 2 seconds\r\n                setTimeout(() => {\r\n                    history.push('/'); // Redirect to login page\r\n                }, 2000);\r\n            } else {\r\n                setError(data.message || 'Signup failed. Please try again.');\r\n            }\r\n        } catch (err) {\r\n            setError('An error occurred. Please try again later.');\r\n        } finally {\r\n            setLoading(false); // Set loading to false\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container className=\"mt-5\">\r\n            <h2 className=\"text-center\">Create Account</h2>\r\n            {error && <Alert variant=\"danger\">{error}</Alert>}\r\n            {success && <Alert variant=\"success\">{success}</Alert>}\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group controlId=\"formEmail\">\r\n                    <Form.Label>Email address</Form.Label>\r\n                    <Form.Control\r\n                        type=\"email\"\r\n                        placeholder=\"Enter email\"\r\n                        name=\"email\"\r\n                        onChange={handleChange}\r\n                        required\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formPassword\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        name=\"password\"\r\n                        onChange={handleChange}\r\n                        required\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Button variant=\"primary\" type=\"submit\" className=\"w-100\" disabled={loading}>\r\n                    {loading ? (\r\n                        <>\r\n                            <Spinner animation=\"border\" size=\"sm\" /> Loading...\r\n                        </>\r\n                    ) : (\r\n                        'Sign Up'\r\n                    )}\r\n                </Button>\r\n            </Form>\r\n            <div className=\"text-center mt-3\">\r\n                <span>Already have an account? </span>\r\n                <Link to=\"#\" onClick={() => setIsLogin(true)}>Login</Link>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Signup;\r\n","import React, { useState } from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Save from './pages/Save';\r\nimport Search from './pages/Search';\r\nimport Navbar from './components/Navbar';\r\nimport Footer from './components/Footer';\r\nimport NoMatch from './components/NoMatch';\r\nimport Login from './components/Login';\r\nimport Signup from './components/Signup';\r\nimport GlobalProvider from './utils/GlobalContext';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { ToastContainer, Zoom } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction App() {\r\n\tconst [isLogin, setIsLogin] = useState(true);\r\n\r\n\treturn (\r\n\t\t<BrowserRouter>\r\n\t\t\t<GlobalProvider>\r\n\t\t\t\t<Navbar />\r\n\t\t\t\t<main className='App'>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t{/* Show Login or Signup based on isLogin state */}\r\n\t\t\t\t\t\t<Route exact path='/'>\r\n\t\t\t\t\t\t\t{isLogin ? <Login setIsLogin={setIsLogin} /> : <Signup setIsLogin={setIsLogin} />}\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path='/save' component={Save} />\r\n\t\t\t\t\t\t<Route exact path='/search' component={Search} />\r\n\t\t\t\t\t\t<Route component={NoMatch} />\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t\t<ToastContainer transition={Zoom} autoClose={3000} />\r\n\t\t\t\t</main>\r\n\t\t\t\t<Footer />\r\n\t\t\t</GlobalProvider>\r\n\t\t</BrowserRouter>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}